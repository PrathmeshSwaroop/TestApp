package com.example.open.gl.experiment;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import android.opengl.GLES20;

public class Triangle {
	private FloatBuffer mTriangleVerticesBuff;
	private final int BYTES_PER_FLOAT=4;
	public float mTriangleCoords[];
	public float mTriangleColorCoords[];
	private int mVertexShaderHandle;
	private int mFragmenShadertHandle;
	
	private final String mVertexshader="uniform mat4 mMVPMatrix;"
			+ "attribute vec4 vPosition;"
			+ "void main(){"
			+ "gl_Position=mMVPMatrix*vPosition;"
			+ "}";
	
	private final String mFragmentShader="precision mediump float;"
			+ "varying vec4 vColor;"
			+ "void main(){"
			+ "gl_FragColor=vColor;"
			+ "}";
	
	
	
	
	public Triangle(){
		
		setUpAndCompileVertexShader();
		setUpAndCompileFragmentShader();
	}
	
	private void setUpAndCompileFragmentShader() {
		int vertexShaderHandle=GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);
		GLES20.glShaderSource(vertexShaderHandle,mVertexshader);
	}

	private void setUpAndCompileVertexShader() {
		
	}

	public float[] getTriangleColorCoords() {
		return mTriangleColorCoords;
	}
	public void setTriangleColorCoords(float[] triangleColorCoords) {
		this.mTriangleColorCoords = triangleColorCoords;
	}
	public float[] getTriangleCoords() {
		return mTriangleCoords;
	}
	public void setTriangleCoords(float[] triangleCoords) {
		this.mTriangleCoords = triangleCoords;
	}
	public FloatBuffer getColorFloatBuffer(){
		if(!(mTriangleColorCoords.length<1)){
			mTriangleVerticesBuff=ByteBuffer
							.allocate(BYTES_PER_FLOAT*mTriangleColorCoords.length)
							.order(ByteOrder.nativeOrder()).asFloatBuffer();
			mTriangleVerticesBuff.put(mTriangleColorCoords).position(0);
			return mTriangleVerticesBuff;
		}else{
			return null;
		}
	}
	public FloatBuffer getPositionFloatBuffer(){
		if(!(mTriangleCoords.length<1)){
			mTriangleVerticesBuff=ByteBuffer
							.allocate(BYTES_PER_FLOAT*mTriangleCoords.length)
							.order(ByteOrder.nativeOrder()).asFloatBuffer();
			mTriangleVerticesBuff.put(mTriangleCoords).position(0);
			return mTriangleVerticesBuff;
		}else{
			return null;
		}
	}
	public int getVertexShader(){
		return mVertexShaderHandle;
	}
	public int getFragmentShader(){
		return mFragmenShadertHandle;
	}
}
