package com.bar.renderer;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;

public class MyGLRenderer implements GLSurfaceView.Renderer {

	private final float[] mMVPMatrix = new float[16];
	private final float[] mProjMatrix = new float[16];
	private final float[] mVMatrix = new float[16];
	private final float[] mRotationMatrix = new float[16];

	public volatile float mAngle;

	private Triangles mTriangle;

	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {

		GLES20.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		mTriangle = new Triangles();

	}

	@Override
	public void onDrawFrame(GL10 gl) {

		GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
		Matrix.setLookAtM(mVMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);
		Matrix.multiplyMM(mMVPMatrix, 0, mProjMatrix, 0, mVMatrix, 0);
		Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);
		Matrix.multiplyMM(mMVPMatrix, 0, mRotationMatrix, 0, mMVPMatrix, 0);
		draw(mMVPMatrix);

	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {

		GLES20.glViewport(0, 0, width, height);
		float ratio = (float) width / height;
		Matrix.frustumM(mProjMatrix, 0, -ratio, ratio, -1, 1, 3, 7);
	}

	public void draw(float[] mvpMatrix) {
		GLES20.glUseProgram(mTriangle.getShaderProgram());
		Triangles.mPositionHandle = GLES20.glGetAttribLocation(
				mTriangle.getShaderProgram(), "vPosition");
		GLES20.glEnableVertexAttribArray(Triangles.mPositionHandle);
		GLES20.glVertexAttribPointer(Triangles.mPositionHandle,
				Triangles.COORDS_PER_VERTEX, GLES20.GL_FLOAT, false,
				Triangles.VERTEXSTRIDE, Triangles.mVertexBuffer);
		Triangles.mColorHandle = GLES20.glGetUniformLocation(
				mTriangle.getShaderProgram(), "vColor");
		GLES20.glUniform4fv(Triangles.mColorHandle, 1, Triangles.color, 0);
		Triangles.mMVPMatrixHandle = GLES20.glGetUniformLocation(
				mTriangle.getShaderProgram(), "uMVPMatrix");
		GLES20.glUniformMatrix4fv(Triangles.mMVPMatrixHandle, 1, false,
				mvpMatrix, 0);
		GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, Triangles.VERTEXCOUNT);
		GLES20.glDisableVertexAttribArray(Triangles.mPositionHandle);

	}

	public class Triangles {

		public static FloatBuffer mVertexBuffer;
		private final int mProgram;
		public static int mPositionHandle;
		public static int mColorHandle;
		public static int mMVPMatrixHandle;
		public static final int COORDS_PER_VERTEX = 3;

		private final String vertexShaderCode = "uniform mat4 uMVPMatrix;"
				+ "attribute vec4 vPosition;" + "void main() {"
				+ "  gl_Position = vPosition * uMVPMatrix;" + "}";

		private final String fragmentShaderCode = "precision mediump float;"
				+ "uniform vec4 vColor;" + "void main() {"
				+ "  gl_FragColor = vColor;" + "}";

		// in counterclockwise order:

		private static float triangleCoords[] = { 0.0f, 0.622008459f, 0.0f,
				-0.5f, -0.311004243f, 0.0f, 0.5f, -0.311004243f, 0.0f };

		public static final int VERTEXCOUNT = triangleCoords.length
				/ COORDS_PER_VERTEX;
		public static final int VERTEXSTRIDE = COORDS_PER_VERTEX * 4;

		public static float color[] = { 0.63671875f, 0.76953125f, 0.22265625f,
				1.0f };

		public Triangles() {

			ByteBuffer bb = ByteBuffer
					.allocateDirect(triangleCoords.length * 4);
			bb.order(ByteOrder.nativeOrder());
			mVertexBuffer = bb.asFloatBuffer();
			mVertexBuffer.put(triangleCoords);
			mVertexBuffer.position(0);
			int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER,
					vertexShaderCode);
			int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER,
					fragmentShaderCode);
			mProgram = GLES20.glCreateProgram();
			GLES20.glAttachShader(mProgram, vertexShader);
			GLES20.glAttachShader(mProgram, fragmentShader);
			GLES20.glLinkProgram(mProgram);

		}

		private int loadShader(int shadertype, String shaderCode) {
			int shader = GLES20.glCreateShader(shadertype);
			GLES20.glShaderSource(shadertype, shaderCode);
			GLES20.glCompileShader(shader);
			return shader;
		}

		public int getShaderProgram() {
			return mProgram;
		}

	}
}
