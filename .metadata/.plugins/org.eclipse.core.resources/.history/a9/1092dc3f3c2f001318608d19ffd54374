package com.example.open.gl.experiment;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;

public class MyRenderer implements GLSurfaceView.Renderer {
	
	private float mProjMatrix[]=new float[16];
	private float mViewMatrix[]=new float[16];
	private float mPositionOfTriangle[]=new float[12];
	private float mColorOfTriangle[]=new float[12];
	
	
	private int mPositionHandle;
	private int mColorHandle;
	private int muMVPMatrixHandle;
	private int mProgramHandle;

	private float mEyeX;
	private float mEyeY;
	private float mEyeZ;
	
	private float mLookX;
	private float mLookY;
	private float mLookZ;
	
	private float mUpX;
	private float mUpY;
	private float mUpZ;
	
	private Triangle mTriangle;
	
	@Override
	public void onDrawFrame(GL10 gl) {
		initProjection();
		draw();
	}
	private void draw() {
		GLES20.glUseProgram(mProgramHandle);
		muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgramHandle, "mMVPMatrix");
		mPositionHandle=GLES20.glGetAttribLocation(mProgramHandle, "vPosition");
		mColorHandle=GLES20.glGetAttribLocation(mProgramHandle, "vColor");
		GLES20.glEnableVertexAttribArray(mPositionHandle);
		GLES20.glVertexAttribPointer(mPositionHandle, 3,GLES20.GL_FLOAT, false,3*4, mTriangle.getPositionFloatBuffer());
		GLES20.glUniform4fv(mColorHandle, 1,mTriangle.getColorFloatBuffer());
		GLES20.glUniformMatrix4fv(muMVPMatrixHandle,1, false,mViewMatrix, 0);
        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, 3);
        GLES20.glDisableVertexAttribArray(mPositionHandle);	
	}
	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		GLES20.glViewport(0, 0, width, height);
		float ratio = (float) width / height;
	    Matrix.frustumM(mProjMatrix, 0, -ratio, ratio, -1, 1, 3, 7);
	}
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		clearcolor();
		initShape();
	}
	
	private void initShape() {
		mTriangle=new Triangle();
		mTriangle.setTriangleColorCoords(mColorOfTriangle);
		mTriangle.setTriangleCoords(mPositionOfTriangle);
		mProgramHandle=GLES20.glCreateProgram();
		GLES20.glAttachShader(mProgramHandle, mTriangle.getVertexShader());
		GLES20.glAttachShader(mProgramHandle, mTriangle.getFragmentShader());
		GLES20.glLinkProgram(mProgramHandle);
	}
	
	private void clearcolor() {
		GLES20.glClearColor(0.5f,0.5f, 0.5f, 0.5f);
	}
	
	private void initProjection() {
		
		mEyeX=0.0f;
		mEyeY=0.0f;
		mEyeZ=1.5f;
		
		mLookX=0.0f;
		mLookY=0.0f;
		mLookZ=-5.0f;
		
		mUpX=0.0f;
		mUpY=0.1f;
		mUpZ=0.0f;
		
		Matrix.setLookAtM(mViewMatrix,0,mEyeX, mEyeY, mEyeZ,mLookX, mLookY, mLookZ, mUpX, mUpY, mUpZ);
	}
	
	
}
