package com.bar.shapes;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import android.opengl.GLES20;

import com.bar.renderer.MyGLRenderer;


public class Triangles {
	
	 private final String vertexShaderCode =
		        "uniform mat4 uMVPMatrix;" +
		        "attribute vec4 vPosition;" +
		        "void main() {" +
		        "  gl_Position = vPosition * uMVPMatrix;" +
		        "}";

	private final String fragmentShaderCode =
		        "precision mediump float;" +
		        "uniform vec4 vColor;" +
		        "void main() {" +
		        "  gl_FragColor = vColor;" +
		        "}";

		    private final FloatBuffer vertexBuffer;
		    private final int mProgram;
		    private int mPositionHandle;
		    private int mColorHandle;
		    private int mMVPMatrixHandle;
		    static final int COORDS_PER_VERTEX = 3;
		    static float triangleCoords[] = { // in counterclockwise order:
		         0.0f,  0.622008459f, 0.0f,   // top
		        -0.5f, -0.311004243f, 0.0f,   // bottom left
		         0.5f, -0.311004243f, 0.0f    // bottom right
		    };
		    private final int vertexCount = triangleCoords.length / COORDS_PER_VERTEX;
		    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex

		    // Set color with red, green, blue and alpha (opacity) values
		    float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

		    public Triangles() {
		        // initialize vertex byte buffer for shape coordinates
		        ByteBuffer bb = ByteBuffer.allocateDirect(
		                // (number of coordinate values * 4 bytes per float)
		                triangleCoords.length * 4);
		        // use the device hardware's native byte order
		        bb.order(ByteOrder.nativeOrder());

		        // create a floating point buffer from the ByteBuffer
		        vertexBuffer = bb.asFloatBuffer();
		        // add the coordinates to the FloatBuffer
		        vertexBuffer.put(triangleCoords);
		        // set the buffer to read the first coordinate
		        vertexBuffer.position(0);

		        // prepare shaders and OpenGL program
		        int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,
		                                                   vertexShaderCode);
		        int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,
		                                                     fragmentShaderCode);

		        mProgram = GLES20.glCreateProgram();             // create empty OpenGL Program
		        GLES20.glAttachShader(mProgram, vertexShader);   // add the vertex shader to program
		        GLES20.glAttachShader(mProgram, fragmentShader); // add the fragment shader to program
		        GLES20.glLinkProgram(mProgram);                  // create OpenGL program executables

}
