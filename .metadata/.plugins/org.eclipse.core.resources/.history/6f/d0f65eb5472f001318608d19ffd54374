package com.bar.shapes;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import android.opengl.GLES20;


public class Triangles {
	
    private final FloatBuffer mVertexBuffer;
    private final int mProgram;
  /*  private int mPositionHandle;
    private int mColorHandle;
    private int mMVPMatrixHandle;*/
    public static final int COORDS_PER_VERTEX = 3;
    
	private final String vertexShaderCode =
		        "uniform mat4 uMVPMatrix;" +
		        "attribute vec4 vPosition;" +
		        "void main() {" +
		        "  gl_Position = vPosition * uMVPMatrix;" +
		        "}";

	private final String fragmentShaderCode =
		        "precision mediump float;" +
		        "uniform vec4 vColor;" +
		        "void main() {" +
		        "  gl_FragColor = vColor;" +
		        "}";

	// in counterclockwise order:
	
	public static float triangleCoords[] = { 
		         0.0f,  0.622008459f, 0.0f,  
		        -0.5f, -0.311004243f, 0.0f,  
		         0.5f, -0.311004243f, 0.0f   
		    };
	
	public static final int VERTEXCOUNT = triangleCoords.length / COORDS_PER_VERTEX;
	public static final int VERTEXSTRIDE = COORDS_PER_VERTEX * 4;

	public static float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

	public Triangles() {
		        
	        ByteBuffer bb = ByteBuffer.allocateDirect(triangleCoords.length * 4);
		        bb.order(ByteOrder.nativeOrder());
		        mVertexBuffer = bb.asFloatBuffer();
		        mVertexBuffer.put(triangleCoords);
		        mVertexBuffer.position(0);
		        int vertexShader =loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);
		        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);
		        mProgram = GLES20.glCreateProgram();             
		        GLES20.glAttachShader(mProgram, vertexShader);   
		        GLES20.glAttachShader(mProgram, fragmentShader); 
		        GLES20.glLinkProgram(mProgram);                  

	}
	private int loadShader(int shadertype,String shaderCode){
		int shader=GLES20.glCreateShader(shadertype);
		GLES20.glShaderSource(shadertype, shaderCode);
		GLES20.glCompileShader(shader);
		return shader;
	}
	public int getShaderProgram(){
		return mProgram;
	}
	
}	
	
	
