package com.bar.renderer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;

import com.bar.shapes.Triangles;

public class MyGLRenderer implements GLSurfaceView.Renderer {

	
	private int mPositionHandle;
	private int mColorHandle;
	private int mMVPMatrixHandle;
	
	
	private final float[] mMVPMatrix = new float[16];
    private final float[] mProjMatrix = new float[16];
    private final float[] mVMatrix = new float[16];
    private final float[] mRotationMatrix = new float[16];
    
    public volatile float mAngle;
	
    private Triangles mTriangle;
	
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
       
		GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        mTriangle = new Triangles();
        
	}
	
	@Override
	public void onDrawFrame(GL10 gl) {
		
		GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
	    Matrix.setLookAtM(mVMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);
	    Matrix.multiplyMM(mMVPMatrix, 0, mProjMatrix, 0, mVMatrix, 0);
	    Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);
	    Matrix.multiplyMM(mMVPMatrix, 0, mRotationMatrix, 0, mMVPMatrix, 0);
	    draw(mMVPMatrix);
	    
	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		   GLES20.glViewport(0, 0, width, height);
		   
	       float ratio = (float) width / height;
	       Matrix.frustumM(mProjMatrix, 0, -ratio, ratio, -1, 1, 3, 7);
	}
	
	public void draw(float[] mvpMatrix) {
        GLES20.glUseProgram(mTriangle.getShaderProgram());
        mPositionHandle = GLES20.glGetAttribLocation(mTriangle.getShaderProgram(), "vPosition");
        GLES20.glEnableVertexAttribArray(mPositionHandle);
        GLES20.glVertexAttribPointer(mPositionHandle, Triangles.COORDS_PER_VERTEX,
                                     GLES20.GL_FLOAT, false,
                                     Triangles.VERTEXSTRIDE,Triangles.mVertexBuffer);
        mColorHandle = GLES20.glGetUniformLocation(mTriangle.getShaderProgram(), "vColor");
        GLES20.glUniform4fv(mColorHandle, 1, Triangles.color, 0);
        mMVPMatrixHandle = GLES20.glGetUniformLocation(mTriangle.getShaderProgram(), "uMVPMatrix");
        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);
        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, Triangles.VERTEXCOUNT);
        GLES20.glDisableVertexAttribArray(mPositionHandle);
    }
}
